;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/10/2024 10:22:41 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFAF  	GOTO        350
_interrupt:
;FIRMWARE_MODBUS_ver_0_4_0.c,96 :: 		void interrupt(){
0x0008	0xF015C000  	MOVFF       R0, 21
;FIRMWARE_MODBUS_ver_0_4_0.c,97 :: 		if(PIR0.TMR0IF){
0x000C	0x010E      	MOVLB       14
0x000E	0xABCA      	BTFSS       PIR0, 5, 1
0x0010	0xD005      	BRA         L_interrupt0
;FIRMWARE_MODBUS_ver_0_4_0.c,98 :: 		PIR0.TMR0IF = 0;
0x0012	0x9BCA      	BCF         PIR0, 5, 1
;FIRMWARE_MODBUS_ver_0_4_0.c,99 :: 		TMR0H = 0xB;
0x0014	0x0E0B      	MOVLW       11
0x0016	0x6ED4      	MOVWF       TMR0H 
;FIRMWARE_MODBUS_ver_0_4_0.c,100 :: 		TMR0L = 0xDC;
0x0018	0x0EDC      	MOVLW       220
0x001A	0x6ED3      	MOVWF       TMR0L 
;FIRMWARE_MODBUS_ver_0_4_0.c,101 :: 		}
L_interrupt0:
;FIRMWARE_MODBUS_ver_0_4_0.c,102 :: 		if(PIR3.RC1IF){
0x001C	0xABCD      	BTFSS       PIR3, 5, 1
0x001E	0xD002      	BRA         L_interrupt1
;FIRMWARE_MODBUS_ver_0_4_0.c,103 :: 		R1 = ~R1;
0x0020	0x7A83      	BTG         LATA, 5 
;FIRMWARE_MODBUS_ver_0_4_0.c,104 :: 		rxfunction();
0x0022	0xD86C      	RCALL       _rxfunction
;FIRMWARE_MODBUS_ver_0_4_0.c,105 :: 		}
L_interrupt1:
;FIRMWARE_MODBUS_ver_0_4_0.c,106 :: 		}
L_end_interrupt:
L__interrupt13:
0x0024	0xF000C015  	MOVFF       21, R0
0x0028	0x0011      	RETFIE      1
; end of _interrupt
_DeviceConfig:
;system.c,28 :: 		void DeviceConfig(){
;system.c,29 :: 		LATA = 0x10; // #7 (LED), !6, !5, !4, !3, !2, !1, !0
0x002A	0x0E10      	MOVLW       16
0x002C	0x6E83      	MOVWF       LATA 
;system.c,30 :: 		LATB = 0x00; // !7, !6, !5, !4, !3, !2, !1, !0
0x002E	0x6A84      	CLRF        LATB 
;system.c,31 :: 		LATC = 0x00; // !7, !6, !5, !4, !3, !2, !1, !0
0x0030	0x6A85      	CLRF        LATC 
;system.c,32 :: 		LATD = 0x00; // !7, !6, !5, !4, !3, !2, !1, !0
0x0032	0x6A86      	CLRF        LATD 
;system.c,33 :: 		LATE = 0x00; // !7, !6, !5, !4, !3, !2, !1, !0
0x0034	0x6A87      	CLRF        LATE 
;system.c,35 :: 		TRISA = 0xCF; // #7 (OSC1), #6 (OSC2), !5 (RELE 1), !4 (LED), #3 (ANA_INPUT 4), #2 (ANA_INPUT 3), #1 (ANA_INPUT 2), #0 (ANA_INPUT 1)
0x0036	0x0ECF      	MOVLW       207
0x0038	0x6E88      	MOVWF       TRISA 
;system.c,36 :: 		TRISB = 0xC8; // #7 (ICSPD), #6 (ICSPC), !5 (ANA_OUTPUT 4), !4 (TX), #3 (RX), !2 (ANA_OUTPUT 3), !1 (ANA_OUTPUT 2), !0 (ANA_OUTPUT 1)
0x003A	0x0EC8      	MOVLW       200
0x003C	0x6E89      	MOVWF       TRISB 
;system.c,37 :: 		TRISC = 0xFF; // DIG 1 - 16
0x003E	0x0EFF      	MOVLW       255
0x0040	0x6E8A      	MOVWF       TRISC 
;system.c,38 :: 		TRISD = 0xFF; // Input
0x0042	0x0EFF      	MOVLW       255
0x0044	0x6E8B      	MOVWF       TRISD 
;system.c,39 :: 		TRISE = 0x00; // ~[7,6,5,4,3], !2 (RELE 4), !1 (RELE 3), !0 (RELE 2)
0x0046	0x6A8C      	CLRF        TRISE 
;system.c,41 :: 		ANSELA = 0xCF; // #7 (OSC1), #6 (OSC2), !5 (RELE 1), !4 (LED), #3 (ANA_INPUT 4), #2 (ANA_INPUT 3), #1 (ANA_INPUT 2), #0 (ANA_INPUT 1)
0x0048	0x0ECF      	MOVLW       207
0x004A	0x010F      	MOVLB       15
0x004C	0x6F11      	MOVWF       ANSELA, 1
;system.c,42 :: 		ANSELB = 0xC0; // #7 (ICSPD), #6 (ICSPC), !5 (ANA_OUTPUT 4), !4 (TX), !3 (RX), !2 (ANA_OUTPUT 3), !1 (ANA_OUTPUT 2), !0 (ANA_OUTPUT 1)
0x004E	0x0EC0      	MOVLW       192
0x0050	0x6F19      	MOVWF       ANSELB, 1
;system.c,43 :: 		ANSELC = 0x00; // DIG 1 - 16
0x0052	0x6B21      	CLRF        ANSELC, 1
;system.c,44 :: 		ANSELD = 0x00; // Digital
0x0054	0x6B26      	CLRF        ANSELD, 1
;system.c,45 :: 		ANSELE = 0x00; // RELE 4 - 2
0x0056	0x6B2E      	CLRF        ANSELE, 1
;system.c,47 :: 		WPUA = 0x00; //
0x0058	0x6B10      	CLRF        WPUA, 1
;system.c,48 :: 		WPUB = 0x00; //
0x005A	0x6B18      	CLRF        WPUB, 1
;system.c,49 :: 		WPUC = 0x00; // Desactivamos los Weak-PullUps
0x005C	0x6B20      	CLRF        WPUC, 1
;system.c,50 :: 		WPUD = 0x00; //
0x005E	0x6B25      	CLRF        WPUD, 1
;system.c,51 :: 		WPUE = 0x00; //
0x0060	0x6B2D      	CLRF        WPUE, 1
;system.c,53 :: 		SLRCONA = 0xFF; //
0x0062	0x0EFF      	MOVLW       255
0x0064	0x6F0E      	MOVWF       SLRCONA, 1
;system.c,54 :: 		SLRCONB = 0xFF; //
0x0066	0x0EFF      	MOVLW       255
0x0068	0x6F16      	MOVWF       SLRCONB, 1
;system.c,55 :: 		SLRCONC = 0xFF; // Dejamos el limite de SlewRate
0x006A	0x0EFF      	MOVLW       255
0x006C	0x6F1E      	MOVWF       SLRCONC, 1
;system.c,56 :: 		SLRCOND = 0xFF; //
0x006E	0x0EFF      	MOVLW       255
0x0070	0x6F23      	MOVWF       SLRCOND, 1
;system.c,57 :: 		SLRCONE = 0x07; //
0x0072	0x0E07      	MOVLW       7
0x0074	0x6F2B      	MOVWF       SLRCONE, 1
;system.c,59 :: 		INLVLA = 0xFF; //
0x0076	0x0EFF      	MOVLW       255
0x0078	0x6F0D      	MOVWF       INLVLA, 1
;system.c,60 :: 		INLVLB = 0xFF; //
0x007A	0x0EFF      	MOVLW       255
0x007C	0x6F15      	MOVWF       INLVLB, 1
;system.c,61 :: 		INLVLC = 0xFF; // Dejamos los niveles TTL
0x007E	0x0EFF      	MOVLW       255
0x0080	0x6F1D      	MOVWF       INLVLC, 1
;system.c,62 :: 		INLVLD = 0xFF; //
0x0082	0x0EFF      	MOVLW       255
0x0084	0x6F22      	MOVWF       INLVLD, 1
;system.c,63 :: 		INLVLE = 0x07; //
0x0086	0x0E07      	MOVLW       7
0x0088	0x6F2A      	MOVWF       INLVLE, 1
;system.c,65 :: 		RB4PPS = 0x09; // TX1 --> RB4
0x008A	0x0E09      	MOVLW       9
0x008C	0x010E      	MOVLB       14
0x008E	0x6FF3      	MOVWF       RB4PPS, 1
;system.c,66 :: 		RX1PPS = 0x0B; // RX1 --> RB3
0x0090	0x0E0B      	MOVLW       11
0x0092	0x6FB5      	MOVWF       RX1PPS, 1
;system.c,67 :: 		}
L_end_DeviceConfig:
0x0094	0x0012      	RETURN      0
; end of _DeviceConfig
_InterruptConfig:
;system.c,83 :: 		void InterruptConfig(){
;system.c,84 :: 		INTCON = 0xC0; // GIE = 1, PIE = 1
0x0096	0x0EC0      	MOVLW       192
0x0098	0x6EF2      	MOVWF       INTCON 
;system.c,86 :: 		T0CON0 = 0x90;
0x009A	0x0E90      	MOVLW       144
0x009C	0x6ED5      	MOVWF       T0CON0 
;system.c,87 :: 		T0CON1 = 0x43;
0x009E	0x0E43      	MOVLW       67
0x00A0	0x6ED6      	MOVWF       T0CON1 
;system.c,88 :: 		TMR0H = 0xB;
0x00A2	0x0E0B      	MOVLW       11
0x00A4	0x6ED4      	MOVWF       TMR0H 
;system.c,89 :: 		TMR0L = 0xDC;
0x00A6	0x0EDC      	MOVLW       220
0x00A8	0x6ED3      	MOVWF       TMR0L 
;system.c,91 :: 		T2CLKCON = 0x01;
0x00AA	0x0E01      	MOVLW       1
0x00AC	0x6EBF      	MOVWF       T2CLKCON 
;system.c,92 :: 		T2HLT = 0x00;
0x00AE	0x6ABE      	CLRF        T2HLT 
;system.c,93 :: 		T2RST = 0x00;
0x00B0	0x6AC0      	CLRF        T2RST 
;system.c,94 :: 		T2PR = 0x4D;
0x00B2	0x0E4D      	MOVLW       77
0x00B4	0x6EBC      	MOVWF       T2PR 
;system.c,95 :: 		T2TMR = 0x00;
0x00B6	0x6ABB      	CLRF        T2TMR 
;system.c,96 :: 		T2CON = 0xE0;
0x00B8	0x0EE0      	MOVLW       224
0x00BA	0x6EBD      	MOVWF       T2CON 
;system.c,98 :: 		PIR0 = 0x00;
0x00BC	0x010E      	MOVLB       14
0x00BE	0x6BCA      	CLRF        PIR0, 1
;system.c,99 :: 		PIE3 = 0x20; // RC1IE = 1 (EUSART 1 RX)
0x00C0	0x0E20      	MOVLW       32
0x00C2	0x6FC5      	MOVWF       PIE3, 1
;system.c,100 :: 		PIR3 = 0x00;
0x00C4	0x6BCD      	CLRF        PIR3, 1
;system.c,101 :: 		PIR4 = 0x00;
0x00C6	0x6BCE      	CLRF        PIR4, 1
;system.c,102 :: 		}
L_end_InterruptConfig:
0x00C8	0x0012      	RETURN      0
; end of _InterruptConfig
_ClockConfig:
;system.c,69 :: 		void ClockConfig(){
;system.c,70 :: 		OSCCON1 = 0x70;   // ~7, [#6, #5, #4] = EXTOSC, ![3, 2, 1, 0]
0x00CA	0x0E70      	MOVLW       112
0x00CC	0x010E      	MOVLB       14
0x00CE	0x6FD8      	MOVWF       OSCCON1, 1
;system.c,71 :: 		OSCEN = 0x80;     // #7(EXTOEN), !6, !5, !4, !3, !2, #1, #0
0x00D0	0x0E80      	MOVLW       128
0x00D2	0x6FDC      	MOVWF       OSCEN, 1
;system.c,72 :: 		}
L_end_ClockConfig:
0x00D4	0x0012      	RETURN      0
; end of _ClockConfig
_InitEUSART:
;system.c,74 :: 		void InitEUSART(){
;system.c,75 :: 		BAUD1CON = 0x58;
0x00D6	0x0E58      	MOVLW       88
0x00D8	0x6E9F      	MOVWF       BAUD1CON 
;system.c,76 :: 		RC1STA = 0x90;
0x00DA	0x0E90      	MOVLW       144
0x00DC	0x6E9D      	MOVWF       RC1STA 
;system.c,77 :: 		TX1STA = 0x26;
0x00DE	0x0E26      	MOVLW       38
0x00E0	0x6E9E      	MOVWF       TX1STA 
;system.c,78 :: 		SP1BRGL = 0x3;
0x00E2	0x0E03      	MOVLW       3
0x00E4	0x6E9B      	MOVWF       SP1BRGL 
;system.c,79 :: 		SP1BRGH = 0x1;
0x00E6	0x0E01      	MOVLW       1
0x00E8	0x6E9C      	MOVWF       SP1BRGH 
;system.c,81 :: 		}
L_end_InitEUSART:
0x00EA	0x0012      	RETURN      0
; end of _InitEUSART
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x00EC	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x00EE	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x00F2	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x00F4	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x00F6	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x00F8	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x00FA	0x0012      	RETURN      0
; end of ___CC2DW
_rxfunction:
;FIRMWARE_MODBUS_ver_0_4_0.c,144 :: 		void rxfunction(){
;FIRMWARE_MODBUS_ver_0_4_0.c,145 :: 		in.in_string[in.rxIndex++] = RC1REG;
0x00FC	0x0E16      	MOVLW       _in
0x00FE	0x6EE1      	MOVWF       FSR1L 
0x0100	0x0E00      	MOVLW       hi_addr(_in)
0x0102	0x6EE2      	MOVWF       FSR1L+1 
0x0104	0x502F      	MOVF        _in+25, 0 
0x0106	0x26E1      	ADDWF       FSR1L, 1 
0x0108	0xB0D8      	BTFSC       STATUS, 0 
0x010A	0x2AE2      	INCF        FSR1L+1, 1 
0x010C	0xFFE6CF99  	MOVFF       RC1REG, POSTINC1
0x0110	0x502F      	MOVF        _in+25, 0 
0x0112	0x0F01      	ADDLW       1
0x0114	0x6E00      	MOVWF       R0 
0x0116	0xF02FC000  	MOVFF       R0, _in+25
;FIRMWARE_MODBUS_ver_0_4_0.c,146 :: 		in.TimeOutEnable = 1;
0x011A	0x0E01      	MOVLW       1
0x011C	0x6E31      	MOVWF       _in+27 
;FIRMWARE_MODBUS_ver_0_4_0.c,148 :: 		if(in.rxIndex >= 24){
0x011E	0x0E18      	MOVLW       24
0x0120	0x5C2F      	SUBWF       _in+25, 0 
0x0122	0xE306      	BNC         L_rxfunction9
;FIRMWARE_MODBUS_ver_0_4_0.c,149 :: 		in.rxIndex = 0;
0x0124	0x6A2F      	CLRF        _in+25 
;FIRMWARE_MODBUS_ver_0_4_0.c,150 :: 		in.rxFlag = 1;
0x0126	0x0E01      	MOVLW       1
0x0128	0x6E30      	MOVWF       _in+26 
;FIRMWARE_MODBUS_ver_0_4_0.c,151 :: 		in.TimeOutEnable = 0;
0x012A	0x6A31      	CLRF        _in+27 
;FIRMWARE_MODBUS_ver_0_4_0.c,152 :: 		in.TimeOut = 0;
0x012C	0x6A32      	CLRF        _in+28 
0x012E	0x6A33      	CLRF        _in+29 
;FIRMWARE_MODBUS_ver_0_4_0.c,153 :: 		}
L_rxfunction9:
;FIRMWARE_MODBUS_ver_0_4_0.c,154 :: 		}
L_end_rxfunction:
0x0130	0x0012      	RETURN      0
; end of _rxfunction
_ud_write_uart1:
;FIRMWARE_MODBUS_ver_0_4_0.c,156 :: 		void ud_write_uart1(char *_string){
;FIRMWARE_MODBUS_ver_0_4_0.c,157 :: 		while(*_string){
L_ud_write_uart110:
0x0132	0xFFE9C034  	MOVFF       FARG_ud_write_uart1__string, FSR0L
0x0136	0xFFEAC035  	MOVFF       FARG_ud_write_uart1__string+1, FSR0H
0x013A	0x52EE      	MOVF        POSTINC0, 1 
0x013C	0xE009      	BZ          L_ud_write_uart111
;FIRMWARE_MODBUS_ver_0_4_0.c,158 :: 		TX1REG = *_string;
0x013E	0xFFE9C034  	MOVFF       FARG_ud_write_uart1__string, FSR0L
0x0142	0xFFEAC035  	MOVFF       FARG_ud_write_uart1__string+1, FSR0H
0x0146	0xFF9ACFEE  	MOVFF       POSTINC0, TX1REG
;FIRMWARE_MODBUS_ver_0_4_0.c,159 :: 		*_string++;
0x014A	0x4A34      	INFSNZ      FARG_ud_write_uart1__string, 1 
0x014C	0x2A35      	INCF        FARG_ud_write_uart1__string+1, 1 
;FIRMWARE_MODBUS_ver_0_4_0.c,160 :: 		}
0x014E	0xD7F1      	BRA         L_ud_write_uart110
L_ud_write_uart111:
;FIRMWARE_MODBUS_ver_0_4_0.c,161 :: 		}
L_end_ud_write_uart1:
0x0150	0x0012      	RETURN      0
; end of _ud_write_uart1
_InitSystem:
;system.c,104 :: 		void InitSystem(){
;system.c,105 :: 		InterruptConfig();
0x0152	0xDFA1      	RCALL       _InterruptConfig
;system.c,106 :: 		DeviceConfig();
0x0154	0xDF6A      	RCALL       _DeviceConfig
;system.c,107 :: 		ClockConfig();
0x0156	0xDFB9      	RCALL       _ClockConfig
;system.c,108 :: 		InitEUSART();
0x0158	0xDFBE      	RCALL       _InitEUSART
;system.c,109 :: 		LATA.F4 = ~LATA.F4;
0x015A	0x7883      	BTG         LATA, 4 
;system.c,110 :: 		}
L_end_InitSystem:
0x015C	0x0012      	RETURN      0
; end of _InitSystem
_main:
;FIRMWARE_MODBUS_ver_0_4_0.c,112 :: 		void main(){
;FIRMWARE_MODBUS_ver_0_4_0.c,114 :: 		InitSystem();
0x015E	0xDFF9      	RCALL       _InitSystem
;FIRMWARE_MODBUS_ver_0_4_0.c,115 :: 		Delay_ms(100);
0x0160	0x0E03      	MOVLW       3
0x0162	0x6E0B      	MOVWF       R11, 0
0x0164	0x0E8A      	MOVLW       138
0x0166	0x6E0C      	MOVWF       R12, 0
0x0168	0x0E55      	MOVLW       85
0x016A	0x6E0D      	MOVWF       R13, 0
L_main2:
0x016C	0x2E0D      	DECFSZ      R13, 1, 0
0x016E	0xD7FE      	BRA         L_main2
0x0170	0x2E0C      	DECFSZ      R12, 1, 0
0x0172	0xD7FC      	BRA         L_main2
0x0174	0x2E0B      	DECFSZ      R11, 1, 0
0x0176	0xD7FA      	BRA         L_main2
0x0178	0x0000      	NOP
0x017A	0x0000      	NOP
;FIRMWARE_MODBUS_ver_0_4_0.c,117 :: 		ud_write_uart1('H');
0x017C	0x0E48      	MOVLW       72
0x017E	0x6E34      	MOVWF       FARG_ud_write_uart1__string 
0x0180	0x0E00      	MOVLW       0
0x0182	0x6E35      	MOVWF       FARG_ud_write_uart1__string+1 
0x0184	0xDFD6      	RCALL       _ud_write_uart1
;FIRMWARE_MODBUS_ver_0_4_0.c,119 :: 		in.rxIndex = 0;
0x0186	0x6A2F      	CLRF        _in+25 
;FIRMWARE_MODBUS_ver_0_4_0.c,121 :: 		while(1){
L_main3:
;FIRMWARE_MODBUS_ver_0_4_0.c,122 :: 		if(PIR4.TMR2IF){
0x0188	0x010E      	MOVLB       14
0x018A	0xA3CE      	BTFSS       PIR4, 1, 1
0x018C	0xD019      	BRA         L_main5
;FIRMWARE_MODBUS_ver_0_4_0.c,123 :: 		T2TMR = 0;
0x018E	0x6ABB      	CLRF        T2TMR 
;FIRMWARE_MODBUS_ver_0_4_0.c,124 :: 		if(in.TimeOutEnable){
0x0190	0x5231      	MOVF        _in+27, 1 
0x0192	0xE016      	BZ          L_main6
;FIRMWARE_MODBUS_ver_0_4_0.c,125 :: 		in.TimeOut++;
0x0194	0x0E01      	MOVLW       1
0x0196	0x2432      	ADDWF       _in+28, 0 
0x0198	0x6E00      	MOVWF       R0 
0x019A	0x0E00      	MOVLW       0
0x019C	0x2033      	ADDWFC      _in+29, 0 
0x019E	0x6E01      	MOVWF       R1 
0x01A0	0xF032C000  	MOVFF       R0, _in+28
0x01A4	0xF033C001  	MOVFF       R1, _in+29
;FIRMWARE_MODBUS_ver_0_4_0.c,126 :: 		if(in.TimeOut >= 100){
0x01A8	0x0E80      	MOVLW       128
0x01AA	0x1833      	XORWF       _in+29, 0 
0x01AC	0x6E00      	MOVWF       R0 
0x01AE	0x0E80      	MOVLW       128
0x01B0	0x5C00      	SUBWF       R0, 0 
0x01B2	0xE102      	BNZ         L__main15
0x01B4	0x0E64      	MOVLW       100
0x01B6	0x5C32      	SUBWF       _in+28, 0 
L__main15:
0x01B8	0xE303      	BNC         L_main7
;FIRMWARE_MODBUS_ver_0_4_0.c,127 :: 		in.TimeOut = 0;
0x01BA	0x6A32      	CLRF        _in+28 
0x01BC	0x6A33      	CLRF        _in+29 
;FIRMWARE_MODBUS_ver_0_4_0.c,128 :: 		in.rxIndex = 0;
0x01BE	0x6A2F      	CLRF        _in+25 
;FIRMWARE_MODBUS_ver_0_4_0.c,129 :: 		}
L_main7:
;FIRMWARE_MODBUS_ver_0_4_0.c,130 :: 		}
L_main6:
;FIRMWARE_MODBUS_ver_0_4_0.c,131 :: 		}
L_main5:
;FIRMWARE_MODBUS_ver_0_4_0.c,132 :: 		if(in.rxFlag){
0x01C0	0x5230      	MOVF        _in+26, 1 
0x01C2	0xE002      	BZ          L_main8
;FIRMWARE_MODBUS_ver_0_4_0.c,133 :: 		in.rxFlag = 0;
0x01C4	0x6A30      	CLRF        _in+26 
;FIRMWARE_MODBUS_ver_0_4_0.c,134 :: 		LED = ~LED;
0x01C6	0x7883      	BTG         LATA, 4 
;FIRMWARE_MODBUS_ver_0_4_0.c,135 :: 		}
L_main8:
;FIRMWARE_MODBUS_ver_0_4_0.c,136 :: 		}
0x01C8	0xD7DF      	BRA         L_main3
;FIRMWARE_MODBUS_ver_0_4_0.c,138 :: 		}
L_end_main:
0x01CA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [34]    _interrupt
0x002A     [108]    _DeviceConfig
0x0096      [52]    _InterruptConfig
0x00CA      [12]    _ClockConfig
0x00D6      [22]    _InitEUSART
0x00EC      [16]    ___CC2DW
0x00FC      [54]    _rxfunction
0x0132      [32]    _ud_write_uart1
0x0152      [12]    _InitSystem
0x015E     [110]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_UART_Remappable_12_UART1_Init_Static_tmp_L0
0x0000       [1]    R0
0x0000       [1]    __Lib_UART_Remappable_12_UART2_Init_Static_tmp_L0
0x0001       [1]    R1
0x0001       [1]    __Lib_UART_Remappable_12_UART1_Read_Static___tmp_UART_Read_L0
0x0001       [1]    __Lib_UART_Remappable_12_UART2_Read_Static___tmp_UART_Read_L0
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016      [30]    _in
0x0034       [2]    FARG_ud_write_uart1__string
0x0EB5       [1]    RX1PPS
0x0EC5       [1]    PIE3
0x0ECA       [1]    PIR0
0x0ECD       [1]    PIR3
0x0ECE       [1]    PIR4
0x0ED8       [1]    OSCCON1
0x0EDC       [1]    OSCEN
0x0EF3       [1]    RB4PPS
0x0F0D       [1]    INLVLA
0x0F0E       [1]    SLRCONA
0x0F10       [1]    WPUA
0x0F11       [1]    ANSELA
0x0F15       [1]    INLVLB
0x0F16       [1]    SLRCONB
0x0F18       [1]    WPUB
0x0F19       [1]    ANSELB
0x0F1D       [1]    INLVLC
0x0F1E       [1]    SLRCONC
0x0F20       [1]    WPUC
0x0F21       [1]    ANSELC
0x0F22       [1]    INLVLD
0x0F23       [1]    SLRCOND
0x0F25       [1]    WPUD
0x0F26       [1]    ANSELD
0x0F2A       [1]    INLVLE
0x0F2B       [1]    SLRCONE
0x0F2D       [1]    WPUE
0x0F2E       [1]    ANSELE
0x0F83       [1]    LATA
0x0F84       [1]    LATB
0x0F85       [1]    LATC
0x0F86       [1]    LATD
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F89       [1]    TRISB
0x0F8A       [1]    TRISC
0x0F8B       [1]    TRISD
0x0F8C       [1]    TRISE
0x0F99       [1]    RC1REG
0x0F9A       [1]    TX1REG
0x0F9B       [1]    SP1BRGL
0x0F9C       [1]    SP1BRGH
0x0F9D       [1]    RC1STA
0x0F9E       [1]    TX1STA
0x0F9F       [1]    BAUD1CON
0x0FBB       [1]    T2TMR
0x0FBC       [1]    T2PR
0x0FBD       [1]    T2CON
0x0FBE       [1]    T2HLT
0x0FBF       [1]    T2CLKCON
0x0FC0       [1]    T2RST
0x0FD3       [1]    TMR0L
0x0FD4       [1]    TMR0H
0x0FD5       [1]    T0CON0
0x0FD6       [1]    T0CON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
