;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 01/02/2024 03:26:24 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFDD  	GOTO        442
_interrupt:
;FIRMWARE_SYA_ver_0.c,54 :: 		void interrupt(){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;FIRMWARE_SYA_ver_0.c,56 :: 		if((IOCCF.B0 == 1) && (IOCIE_bit == 1) && (IOCCN.B0 == 1)){
0x0010	0x010F      	MOVLB       15
0x0012	0xA11A      	BTFSS       IOCCF, 0, 1
0x0014	0xD009      	BRA         L_interrupt2
0x0016	0x010E      	MOVLB       14
0x0018	0xA9C2      	BTFSS       IOCIE_bit, BitPos(IOCIE_bit+0), 1
0x001A	0xD006      	BRA         L_interrupt2
0x001C	0x010F      	MOVLB       15
0x001E	0xA11B      	BTFSS       IOCCN, 0, 1
0x0020	0xD003      	BRA         L_interrupt2
L__interrupt47:
;FIRMWARE_SYA_ver_0.c,57 :: 		IOCCF.B0 = 0; // Limpiamos la bandera de IOC
0x0022	0x911A      	BCF         IOCCF, 0, 1
;FIRMWARE_SYA_ver_0.c,58 :: 		PosEdge1 = 1; // Ponemos en 1 la bandera de transicion positiva en 1
0x0024	0x8019      	BSF         _PosEdge1, BitPos(_PosEdge1+0) 
;FIRMWARE_SYA_ver_0.c,59 :: 		blink(); // Rutina de parpadeo LED
0x0026	0xD880      	RCALL       _blink
;FIRMWARE_SYA_ver_0.c,60 :: 		}
L_interrupt2:
;FIRMWARE_SYA_ver_0.c,62 :: 		if((IOCCF.B1 == 1) && (IOCIE_bit == 1) && ((IOCCN.B0 == 1))){
0x0028	0x010F      	MOVLB       15
0x002A	0xA31A      	BTFSS       IOCCF, 1, 1
0x002C	0xD009      	BRA         L_interrupt5
0x002E	0x010E      	MOVLB       14
0x0030	0xA9C2      	BTFSS       IOCIE_bit, BitPos(IOCIE_bit+0), 1
0x0032	0xD006      	BRA         L_interrupt5
0x0034	0x010F      	MOVLB       15
0x0036	0xA11B      	BTFSS       IOCCN, 0, 1
0x0038	0xD003      	BRA         L_interrupt5
L__interrupt46:
;FIRMWARE_SYA_ver_0.c,63 :: 		IOCCF.B1 = 0; // Limpiamos la bandera de IOC
0x003A	0x931A      	BCF         IOCCF, 1, 1
;FIRMWARE_SYA_ver_0.c,64 :: 		PosEdge2 = 1; // Ponemos en 1 la bandera de transicion positiva en 1
0x003C	0x8619      	BSF         _PosEdge2, BitPos(_PosEdge2+0) 
;FIRMWARE_SYA_ver_0.c,65 :: 		blink(); // Rutina de parpadeo LED
0x003E	0xD874      	RCALL       _blink
;FIRMWARE_SYA_ver_0.c,66 :: 		}
L_interrupt5:
;FIRMWARE_SYA_ver_0.c,68 :: 		}
L_end_interrupt:
L__interrupt56:
0x0040	0xF000C016  	MOVFF       22, R0
0x0044	0xF001C015  	MOVFF       21, R1
0x0048	0x0011      	RETFIE      1
; end of _interrupt
_watcher:
;FIRMWARE_SYA_ver_0.c,145 :: 		void watcher(){
;FIRMWARE_SYA_ver_0.c,148 :: 		if((SWITCH1 == 0) && (PosEdge1 == 1)){
0x004A	0xB08F      	BTFSC       PORTC, 0 
0x004C	0xD015      	BRA         L_watcher25
0x004E	0xA019      	BTFSS       _PosEdge1, BitPos(_PosEdge1+0) 
0x0050	0xD013      	BRA         L_watcher25
L__watcher53:
;FIRMWARE_SYA_ver_0.c,149 :: 		flag_switch = 1; // Ponemos en 1 la bandera del switch
0x0052	0x0E01      	MOVLW       1
0x0054	0x6E1A      	MOVWF       _flag_switch 
;FIRMWARE_SYA_ver_0.c,150 :: 		M4 = 1;
0x0056	0x8487      	BSF         LATE, 2 
;FIRMWARE_SYA_ver_0.c,152 :: 		if(once){
0x0058	0xA819      	BTFSS       _once, BitPos(_once+0) 
0x005A	0xD00E      	BRA         L_watcher26
;FIRMWARE_SYA_ver_0.c,153 :: 		switch_count++; // Incrementamos el contador del switch
0x005C	0x4A17      	INFSNZ      _switch_count, 1 
0x005E	0x2A18      	INCF        _switch_count+1, 1 
;FIRMWARE_SYA_ver_0.c,154 :: 		once = FALSE; // Rompemos la condicion del lazo
0x0060	0x9819      	BCF         _once, BitPos(_once+0) 
;FIRMWARE_SYA_ver_0.c,156 :: 		if(switch_count >= 4){
0x0062	0x0E80      	MOVLW       128
0x0064	0x1818      	XORWF       _switch_count+1, 0 
0x0066	0x6E00      	MOVWF       R0 
0x0068	0x0E80      	MOVLW       128
0x006A	0x5C00      	SUBWF       R0, 0 
0x006C	0xE102      	BNZ         L__watcher64
0x006E	0x0E04      	MOVLW       4
0x0070	0x5C17      	SUBWF       _switch_count, 0 
L__watcher64:
0x0072	0xE302      	BNC         L_watcher27
;FIRMWARE_SYA_ver_0.c,157 :: 		switch_count = 0; // Si, entonces lo reiniciamos
0x0074	0x6A17      	CLRF        _switch_count 
0x0076	0x6A18      	CLRF        _switch_count+1 
;FIRMWARE_SYA_ver_0.c,158 :: 		}
L_watcher27:
;FIRMWARE_SYA_ver_0.c,159 :: 		}
L_watcher26:
;FIRMWARE_SYA_ver_0.c,160 :: 		}
L_watcher25:
;FIRMWARE_SYA_ver_0.c,162 :: 		if((SWITCH1 == 1) && (SWITCH2 == 1)){
0x0078	0xA08F      	BTFSS       PORTC, 0 
0x007A	0xD008      	BRA         L_watcher30
0x007C	0xA28F      	BTFSS       PORTC, 1 
0x007E	0xD006      	BRA         L_watcher30
L__watcher52:
;FIRMWARE_SYA_ver_0.c,163 :: 		flag_switch = 0; // Ponemos la bandera del switch en 0
0x0080	0x6A1A      	CLRF        _flag_switch 
;FIRMWARE_SYA_ver_0.c,164 :: 		reg = switch_count; // Asignamos el valor del contador al registro
0x0082	0xF01BC017  	MOVFF       _switch_count, _reg
0x0086	0xF01CC018  	MOVFF       _switch_count+1, _reg+1
;FIRMWARE_SYA_ver_0.c,165 :: 		once = TRUE; // Reiniciamos la condicion del lazo
0x008A	0x8819      	BSF         _once, BitPos(_once+0) 
;FIRMWARE_SYA_ver_0.c,166 :: 		}
L_watcher30:
;FIRMWARE_SYA_ver_0.c,168 :: 		if((SWITCH2 == 1) && (SWITCH1 == 0)){
0x008C	0xA28F      	BTFSS       PORTC, 1 
0x008E	0xD009      	BRA         L_watcher33
0x0090	0xB08F      	BTFSC       PORTC, 0 
0x0092	0xD007      	BRA         L_watcher33
L__watcher51:
;FIRMWARE_SYA_ver_0.c,170 :: 		flag_switch = 1;
0x0094	0x0E01      	MOVLW       1
0x0096	0x6E1A      	MOVWF       _flag_switch 
;FIRMWARE_SYA_ver_0.c,172 :: 		if(once){
0x0098	0xA819      	BTFSS       _once, BitPos(_once+0) 
0x009A	0xD003      	BRA         L_watcher34
;FIRMWARE_SYA_ver_0.c,173 :: 		switch_count++; // Incrementamos el contador del registro
0x009C	0x4A17      	INFSNZ      _switch_count, 1 
0x009E	0x2A18      	INCF        _switch_count+1, 1 
;FIRMWARE_SYA_ver_0.c,174 :: 		once = FALSE; // Reiniciamos la condicion del lazo
0x00A0	0x9819      	BCF         _once, BitPos(_once+0) 
;FIRMWARE_SYA_ver_0.c,175 :: 		}
L_watcher34:
;FIRMWARE_SYA_ver_0.c,176 :: 		}
L_watcher33:
;FIRMWARE_SYA_ver_0.c,178 :: 		if((SWITCH2 == 0) && (PosEdge2 == 1)){
0x00A2	0xB28F      	BTFSC       PORTC, 1 
0x00A4	0xD004      	BRA         L_watcher37
0x00A6	0xA619      	BTFSS       _PosEdge2, BitPos(_PosEdge2+0) 
0x00A8	0xD002      	BRA         L_watcher37
L__watcher50:
;FIRMWARE_SYA_ver_0.c,179 :: 		flag_switch = 2; // Ponemos en 2 la bandera del switch
0x00AA	0x0E02      	MOVLW       2
0x00AC	0x6E1A      	MOVWF       _flag_switch 
;FIRMWARE_SYA_ver_0.c,180 :: 		}
L_watcher37:
;FIRMWARE_SYA_ver_0.c,182 :: 		}
L_watcher22:
;FIRMWARE_SYA_ver_0.c,183 :: 		}
L_end_watcher:
0x00AE	0x0012      	RETURN      0
; end of _watcher
_selector:
;FIRMWARE_SYA_ver_0.c,91 :: 		void selector(){
;FIRMWARE_SYA_ver_0.c,93 :: 		if(flag_switch == 0){
0x00B0	0x501A      	MOVF        _flag_switch, 0 
0x00B2	0x0A00      	XORLW       0
0x00B4	0xE103      	BNZ         L_selector8
;FIRMWARE_SYA_ver_0.c,94 :: 		M1 = 0;    // Apagamos todas las
0x00B6	0x9A83      	BCF         LATA, 5 
;FIRMWARE_SYA_ver_0.c,95 :: 		M2 = 0;    // bombas
0x00B8	0x9087      	BCF         LATE, 0 
;FIRMWARE_SYA_ver_0.c,96 :: 		M3 = 0;    //
0x00BA	0x9287      	BCF         LATE, 1 
;FIRMWARE_SYA_ver_0.c,97 :: 		}
L_selector8:
;FIRMWARE_SYA_ver_0.c,99 :: 		if((flag_switch == 2) && (PosEdge2 == 1)){
0x00BC	0x501A      	MOVF        _flag_switch, 0 
0x00BE	0x0A02      	XORLW       2
0x00C0	0xE105      	BNZ         L_selector11
0x00C2	0xA619      	BTFSS       _PosEdge2, BitPos(_PosEdge2+0) 
0x00C4	0xD003      	BRA         L_selector11
L__selector49:
;FIRMWARE_SYA_ver_0.c,100 :: 		M1 = 1;    // Encendemos todas las
0x00C6	0x8A83      	BSF         LATA, 5 
;FIRMWARE_SYA_ver_0.c,101 :: 		M2 = 1;    // bombas
0x00C8	0x8087      	BSF         LATE, 0 
;FIRMWARE_SYA_ver_0.c,102 :: 		M3 = 1;    //
0x00CA	0x8287      	BSF         LATE, 1 
;FIRMWARE_SYA_ver_0.c,103 :: 		}
L_selector11:
;FIRMWARE_SYA_ver_0.c,105 :: 		if((flag_switch == 1) && (PosEdge1 == 1)){
0x00CC	0x501A      	MOVF        _flag_switch, 0 
0x00CE	0x0A01      	XORLW       1
0x00D0	0xE12A      	BNZ         L_selector14
0x00D2	0xA019      	BTFSS       _PosEdge1, BitPos(_PosEdge1+0) 
0x00D4	0xD028      	BRA         L_selector14
L__selector48:
;FIRMWARE_SYA_ver_0.c,112 :: 		switch(reg){
0x00D6	0xD00F      	BRA         L_selector15
;FIRMWARE_SYA_ver_0.c,118 :: 		case 1:
L_selector17:
;FIRMWARE_SYA_ver_0.c,119 :: 		M1 = 1; // Grupo de trabajo 1
0x00D8	0x8A83      	BSF         LATA, 5 
;FIRMWARE_SYA_ver_0.c,120 :: 		M2 = 1; // (Bomba 1 y 2 encendidas)
0x00DA	0x8087      	BSF         LATE, 0 
;FIRMWARE_SYA_ver_0.c,121 :: 		M3 = 0; //
0x00DC	0x9287      	BCF         LATE, 1 
;FIRMWARE_SYA_ver_0.c,122 :: 		break;
0x00DE	0xD023      	BRA         L_selector16
;FIRMWARE_SYA_ver_0.c,123 :: 		case 2:
L_selector18:
;FIRMWARE_SYA_ver_0.c,124 :: 		M1 = 0; // Grupo de trabajo 2
0x00E0	0x9A83      	BCF         LATA, 5 
;FIRMWARE_SYA_ver_0.c,125 :: 		M2 = 1; // (Bomba 2 y 3 encendidas)
0x00E2	0x8087      	BSF         LATE, 0 
;FIRMWARE_SYA_ver_0.c,126 :: 		M3 = 1; //
0x00E4	0x8287      	BSF         LATE, 1 
;FIRMWARE_SYA_ver_0.c,127 :: 		break;
0x00E6	0xD01F      	BRA         L_selector16
;FIRMWARE_SYA_ver_0.c,128 :: 		case 3:
L_selector19:
;FIRMWARE_SYA_ver_0.c,129 :: 		M1 = 1; // Grupo de trabajo 3
0x00E8	0x8A83      	BSF         LATA, 5 
;FIRMWARE_SYA_ver_0.c,130 :: 		M2 = 0; // (Bomba 1 y 3 encendidas)
0x00EA	0x9087      	BCF         LATE, 0 
;FIRMWARE_SYA_ver_0.c,131 :: 		M3 = 1; //
0x00EC	0x8287      	BSF         LATE, 1 
;FIRMWARE_SYA_ver_0.c,132 :: 		break;
0x00EE	0xD01B      	BRA         L_selector16
;FIRMWARE_SYA_ver_0.c,133 :: 		case 4:
L_selector20:
;FIRMWARE_SYA_ver_0.c,134 :: 		reg = 0; // Reiniciamos el registro a cero, potencialmente
0x00F0	0x6A1B      	CLRF        _reg 
0x00F2	0x6A1C      	CLRF        _reg+1 
;FIRMWARE_SYA_ver_0.c,135 :: 		break;   // moverlo a caso 3 para evitar doble encendido de caso 1
0x00F4	0xD018      	BRA         L_selector16
;FIRMWARE_SYA_ver_0.c,136 :: 		}
L_selector15:
0x00F6	0x0E00      	MOVLW       0
0x00F8	0x181C      	XORWF       _reg+1, 0 
0x00FA	0xE102      	BNZ         L__selector59
0x00FC	0x0E01      	MOVLW       1
0x00FE	0x181B      	XORWF       _reg, 0 
L__selector59:
0x0100	0xE0EB      	BZ          L_selector17
0x0102	0x0E00      	MOVLW       0
0x0104	0x181C      	XORWF       _reg+1, 0 
0x0106	0xE102      	BNZ         L__selector60
0x0108	0x0E02      	MOVLW       2
0x010A	0x181B      	XORWF       _reg, 0 
L__selector60:
0x010C	0xE0E9      	BZ          L_selector18
0x010E	0x0E00      	MOVLW       0
0x0110	0x181C      	XORWF       _reg+1, 0 
0x0112	0xE102      	BNZ         L__selector61
0x0114	0x0E03      	MOVLW       3
0x0116	0x181B      	XORWF       _reg, 0 
L__selector61:
0x0118	0xE0E7      	BZ          L_selector19
0x011A	0x0E00      	MOVLW       0
0x011C	0x181C      	XORWF       _reg+1, 0 
0x011E	0xE102      	BNZ         L__selector62
0x0120	0x0E04      	MOVLW       4
0x0122	0x181B      	XORWF       _reg, 0 
L__selector62:
0x0124	0xE0E5      	BZ          L_selector20
L_selector16:
;FIRMWARE_SYA_ver_0.c,137 :: 		}
L_selector14:
;FIRMWARE_SYA_ver_0.c,139 :: 		}
L_end_selector:
0x0126	0x0012      	RETURN      0
; end of _selector
_blink:
;FIRMWARE_SYA_ver_0.c,189 :: 		void blink(){
;FIRMWARE_SYA_ver_0.c,191 :: 		while((PosEdge1 == 1) || (PosEdge2 == 1)){
0x0128	0xB019      	BTFSC       _PosEdge1, BitPos(_PosEdge1+0) 
0x012A	0xD003      	BRA         L__blink54
0x012C	0xB619      	BTFSC       _PosEdge2, BitPos(_PosEdge2+0) 
0x012E	0xD001      	BRA         L__blink54
0x0130	0xD015      	BRA         L_blink39
L__blink54:
;FIRMWARE_SYA_ver_0.c,194 :: 		for(i = 0; i < 4; i++){
0x0132	0x6A01      	CLRF        R1 
L_blink42:
0x0134	0x0E04      	MOVLW       4
0x0136	0x5C01      	SUBWF       R1, 0 
0x0138	0xE211      	BC          L_blink43
;FIRMWARE_SYA_ver_0.c,195 :: 		LED = ~LED;
0x013A	0x7883      	BTG         LATA, 4 
;FIRMWARE_SYA_ver_0.c,196 :: 		Delay_ms(50);
0x013C	0x0E02      	MOVLW       2
0x013E	0x6E0B      	MOVWF       R11, 0
0x0140	0x0E45      	MOVLW       69
0x0142	0x6E0C      	MOVWF       R12, 0
0x0144	0x0EA9      	MOVLW       169
0x0146	0x6E0D      	MOVWF       R13, 0
L_blink45:
0x0148	0x2E0D      	DECFSZ      R13, 1, 0
0x014A	0xD7FE      	BRA         L_blink45
0x014C	0x2E0C      	DECFSZ      R12, 1, 0
0x014E	0xD7FC      	BRA         L_blink45
0x0150	0x2E0B      	DECFSZ      R11, 1, 0
0x0152	0xD7FA      	BRA         L_blink45
0x0154	0x0000      	NOP
0x0156	0x0000      	NOP
;FIRMWARE_SYA_ver_0.c,194 :: 		for(i = 0; i < 4; i++){
0x0158	0x2A01      	INCF        R1, 1 
;FIRMWARE_SYA_ver_0.c,197 :: 		}
0x015A	0xD7EC      	BRA         L_blink42
L_blink43:
;FIRMWARE_SYA_ver_0.c,199 :: 		}
L_blink39:
;FIRMWARE_SYA_ver_0.c,201 :: 		}
L_end_blink:
0x015C	0x0012      	RETURN      0
; end of _blink
_InitInterrupt:
;FIRMWARE_SYA_ver_0.c,207 :: 		void InitInterrupt(){
;FIRMWARE_SYA_ver_0.c,209 :: 		PIE0 = 0x10;    // Enable bit de IOC (Interrupt on Change)
0x015E	0x0E10      	MOVLW       16
0x0160	0x010E      	MOVLB       14
0x0162	0x6FC2      	MOVWF       PIE0, 1
;FIRMWARE_SYA_ver_0.c,210 :: 		PIR0 = 0x00;    // Limpiamos la bandera de IOC
0x0164	0x6BCA      	CLRF        PIR0, 1
;FIRMWARE_SYA_ver_0.c,211 :: 		IOCCN = 0x03;   // Activamos las banderas de IOC en Transicion negativa para C0 y C1
0x0166	0x0E03      	MOVLW       3
0x0168	0x010F      	MOVLB       15
0x016A	0x6F1B      	MOVWF       IOCCN, 1
;FIRMWARE_SYA_ver_0.c,213 :: 		IOCCF = 0x00;   // Limpiamos la bandera de IOC
0x016C	0x6B1A      	CLRF        IOCCF, 1
;FIRMWARE_SYA_ver_0.c,214 :: 		INTCON = 0xC0;  // Activamos bits de interrupt globales (GIE) y por perifericos (PIE)
0x016E	0x0EC0      	MOVLW       192
0x0170	0x6EF2      	MOVWF       INTCON 
;FIRMWARE_SYA_ver_0.c,216 :: 		}
L_end_InitInterrupt:
0x0172	0x0012      	RETURN      0
; end of _InitInterrupt
___CC2DW:
;__Lib_System_xxK40.c,22 :: 		
;__Lib_System_xxK40.c,24 :: 		
0x0174	0x8E81      	BSF         NVMCON1, 7, 0
;__Lib_System_xxK40.c,25 :: 		
_CC2DL_Loop1:
;__Lib_System_xxK40.c,26 :: 		
0x0176	0x0009      	TBLRD*+
;__Lib_System_xxK40.c,27 :: 		
0x0178	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System_xxK40.c,28 :: 		
0x017C	0x0600      	DECF        R0, 1, 0
;__Lib_System_xxK40.c,29 :: 		
0x017E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,30 :: 		
0x0180	0x0601      	DECF        R1, 1, 0
;__Lib_System_xxK40.c,31 :: 		
0x0182	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System_xxK40.c,33 :: 		
L_end___CC2DW:
0x0184	0x0012      	RETURN      0
; end of ___CC2DW
_InitMCU:
;FIRMWARE_SYA_ver_0.c,222 :: 		void InitMCU(){
;FIRMWARE_SYA_ver_0.c,224 :: 		ADCON1 = 0x0F; // Desactivamos ADC
0x0186	0x0E0F      	MOVLW       15
0x0188	0x010F      	MOVLB       15
0x018A	0x6F59      	MOVWF       ADCON1, 1
;FIRMWARE_SYA_ver_0.c,225 :: 		ANSELC = 0;    // Ponemos en modo digital al puerto C
0x018C	0x6B21      	CLRF        ANSELC, 1
;FIRMWARE_SYA_ver_0.c,226 :: 		ANSELE = 0;    //                ''                 E
0x018E	0x6B2E      	CLRF        ANSELE, 1
;FIRMWARE_SYA_ver_0.c,227 :: 		ANSELA = 0;    //                ''                 A
0x0190	0x6B11      	CLRF        ANSELA, 1
;FIRMWARE_SYA_ver_0.c,229 :: 		TRISC = 0x03;  // Ponemos en modo de entrada a C0 y C1, los demas como salida
0x0192	0x0E03      	MOVLW       3
0x0194	0x6E8A      	MOVWF       TRISC 
;FIRMWARE_SYA_ver_0.c,230 :: 		TRISE = 0x00;  // Ponemos en modo salida al puerto E
0x0196	0x6A8C      	CLRF        TRISE 
;FIRMWARE_SYA_ver_0.c,231 :: 		TRISA = 0x00;  //                ''                A
0x0198	0x6A88      	CLRF        TRISA 
;FIRMWARE_SYA_ver_0.c,233 :: 		PORTC = 0x00;  // Ponemos en linea baja en puerto C
0x019A	0x6A8F      	CLRF        PORTC 
;FIRMWARE_SYA_ver_0.c,234 :: 		PORTE = 0x00;  //                ''             E
0x019C	0x6A91      	CLRF        PORTE 
;FIRMWARE_SYA_ver_0.c,235 :: 		PORTA = 0x10;  // Ponemos en linea alta en A4
0x019E	0x0E10      	MOVLW       16
0x01A0	0x6E8D      	MOVWF       PORTA 
;FIRMWARE_SYA_ver_0.c,237 :: 		LATC = 0x00;   // Dejamos en cero el registro del puerto C
0x01A2	0x6A85      	CLRF        LATC 
;FIRMWARE_SYA_ver_0.c,238 :: 		LATE = 0x00;   //                ''                      E
0x01A4	0x6A87      	CLRF        LATE 
;FIRMWARE_SYA_ver_0.c,239 :: 		LATA = 0x10;   // Dejamos en 1 al pin A4
0x01A6	0x0E10      	MOVLW       16
0x01A8	0x6E83      	MOVWF       LATA 
;FIRMWARE_SYA_ver_0.c,241 :: 		WPUC = 0x03;   // Activamos el pull-up interno de C0 y C1
0x01AA	0x0E03      	MOVLW       3
0x01AC	0x6F20      	MOVWF       WPUC, 1
;FIRMWARE_SYA_ver_0.c,242 :: 		INLVLC = 0x03; // Desactivamos valores TTL para C0 y C1 asumiento valores CMOS
0x01AE	0x0E03      	MOVLW       3
0x01B0	0x6F1D      	MOVWF       INLVLC, 1
;FIRMWARE_SYA_ver_0.c,243 :: 		flag01 = 0;    // Reinicio de
0x01B2	0x9419      	BCF         _flag01, BitPos(_flag01+0) 
;FIRMWARE_SYA_ver_0.c,244 :: 		flag02 = 0;    // banderas (no usadas aun)
0x01B4	0x9219      	BCF         _flag02, BitPos(_flag02+0) 
;FIRMWARE_SYA_ver_0.c,246 :: 		once = TRUE;   // Seteo de la condicion para lazo
0x01B6	0x8819      	BSF         _once, BitPos(_once+0) 
;FIRMWARE_SYA_ver_0.c,248 :: 		}
L_end_InitMCU:
0x01B8	0x0012      	RETURN      0
; end of _InitMCU
_main:
0x01BA	0x0E01      	MOVLW       1
0x01BC	0x6E17      	MOVWF       _switch_count 
0x01BE	0x6A18      	CLRF        24 
;FIRMWARE_SYA_ver_0.c,74 :: 		void main(){
;FIRMWARE_SYA_ver_0.c,76 :: 		InitMCU();       // Configuraciones iniciales del MCU
0x01C0	0xDFE2      	RCALL       _InitMCU
;FIRMWARE_SYA_ver_0.c,77 :: 		InitInterrupt(); //       ''        de interrupciones del MCU
0x01C2	0xDFCD      	RCALL       _InitInterrupt
;FIRMWARE_SYA_ver_0.c,78 :: 		once = TRUE;     // Seteo de la condicion del lazo
0x01C4	0x8819      	BSF         _once, BitPos(_once+0) 
;FIRMWARE_SYA_ver_0.c,81 :: 		while(1){
L_main6:
;FIRMWARE_SYA_ver_0.c,82 :: 		watcher(); // Mandamos a llamar a nuestra rutina watcher
0x01C6	0xDF41      	RCALL       _watcher
;FIRMWARE_SYA_ver_0.c,83 :: 		selector(); // Mandamos a llamar a nuestra rutina del selector
0x01C8	0xDF73      	RCALL       _selector
;FIRMWARE_SYA_ver_0.c,84 :: 		}
0x01CA	0xD7FD      	BRA         L_main6
;FIRMWARE_SYA_ver_0.c,85 :: 		}
L_end_main:
0x01CC	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [66]    _interrupt
0x004A     [102]    _watcher
0x00B0     [120]    _selector
0x0128      [54]    _blink
0x015E      [22]    _InitInterrupt
0x0174      [18]    ___CC2DW
0x0186      [52]    _InitMCU
0x01BA      [20]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0001       [1]    blink_i_L1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [2]    _switch_count
0x0019       [0]    _PosEdge1
0x0019       [0]    _flag01
0x0019       [0]    _flag02
0x0019       [0]    _once
0x0019       [0]    _PosEdge2
0x001A       [1]    _flag_switch
0x001B       [2]    _reg
0x0EC2       [1]    PIE0
0x0EC2       [0]    IOCIE_bit
0x0ECA       [1]    PIR0
0x0F11       [1]    ANSELA
0x0F1A       [1]    IOCCF
0x0F1B       [1]    IOCCN
0x0F1D       [1]    INLVLC
0x0F20       [1]    WPUC
0x0F21       [1]    ANSELC
0x0F2E       [1]    ANSELE
0x0F59       [1]    ADCON1
0x0F81       [1]    NVMCON1
0x0F83       [1]    LATA
0x0F85       [1]    LATC
0x0F87       [1]    LATE
0x0F88       [1]    TRISA
0x0F8A       [1]    TRISC
0x0F8C       [1]    TRISE
0x0F8D       [1]    PORTA
0x0F8F       [1]    PORTC
0x0F91       [1]    PORTE
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
